{
  "swagger": "2.0",
  "info": {
    "description": "Students Teach Documentation",
    "version": "1.0.0",
    "title": "Students Teach",
    "contact": {
      "email": "emirsagit@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "Student",
      "externalDocs": {
        "description": "More about google authentication",
        "url": "https://developers.google.com/identity/sign-in/web/sign-in"
      }
    },
    {
      "name": "Tutor"
    },
    {
      "name": "Question"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/auth/signin": {
      "post": {
        "tags": ["Student"],
        "summary": "Logs student into the system",
        "operationId": "loginUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Student object needs to be added to Students",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Signin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JWT token includes user informations"
          },
          "400": {
            "description": "wrong email or password"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": ["Student"],
        "summary": "Create a new student account",
        "description": "",
        "operationId": "signupStudent",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Student object that needs to be added to Students Collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Student"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "JWT token includes user informations"
          },
          "400": {
            "description": "{ error: `${email}: email already exist` }"
          }
        }
      }
    },
    "/auth/signin/google": {
      "post": {
        "tags": ["Student"],
        "summary": "Create a new student account or login via gmail",
        "description": "",
        "operationId": "signInGoogle",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Student object that needs to be added to Students Collection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SigninGoogle"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JWT token includes user informations"
          },
          "201": {
            "description": "JWT token includes user informations"
          },
          "400": {
            "description": "{ error: 'Cant verify with google authentication' }"
          }
        }
      }
    },
    "/tutors": {
      "get": {
        "tags": ["Tutor"],
        "summary": "get all tutors",
        "description": "get all tutors as an array of objects",
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/tutors/search": {
      "get": {
        "tags": ["Tutor"],
        "summary": "search for tutors",
        "description": "get tutors matching search criteria as an array of objects",
        "parameters": [
          {
            "name": "tutorName",
            "in": "query",
            "description": "tutor first, last or full name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/tutors/{id}": {
      "get": {
        "tags": ["Tutor"],
        "summary": "get tutor with given id",
        "description": "get tutor detail matching id as object",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "tutor id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/tutors/filter/{tagId}": {
      "get": {
        "tags": ["Tutor"],
        "summary": "search for tutors with given tag",
        "description": "get tutors with given tag as an array of objects",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "tag id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },

    "/tutors/{id}/edit": {
      "put": {
        "tags": ["Tutor"],
        "summary": "Edits a tutor profile",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Tutor's id",
            "type": "ObjectId",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "The field/s you want to change",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangeableTutorProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "422": {
            "description": "Error message"
          }
        }
      }
    },
    "/tutors/{id}/chat": {
      "get": {
        "tags": ["Tutor"],
        "summary": "Gets tutor's all chats",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Tutor's id",
            "type": "ObjectId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of chat channels"
          },
          "422": {
            "description": "Error message"
          }
        }
      },
      "post": {
        "tags": ["Tutor"],
        "summary": "Adds a message to specific messaging channel",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Tutor's id",
            "type": "ObjectId",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "\"chatId\" must be included if the messaging channel already exists.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MessageParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Chat object"
          },
          "404": {
            "description": "This chat room doesn't exist or doesn't belong to the user"
          },
          "422": {
            "description": "Error message"
          }
        }
      }
    },

    "/tutors/{id}/chat/{chatId}": {
      "get": {
        "tags": ["Tutor"],
        "summary": "Gets a specific messaging channel",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Tutor's id",
            "type": "ObjectId",
            "required": true
          },
          {
            "in": "path",
            "name": "chatId",
            "description": "Existing messaging chat's id",
            "type": "ObjectId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Messaging channel object"
          },
          "422": {
            "description": "Error message"
          }
        }
      }
    },

    "/question/{id}": {
      "put": {
        "tags": ["Question"],
        "summary": "update a question",
        "operationId": "question",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated successfully"
          },
          "401": {
            "description": "There is no autherization"
          },
          "403": {
            "description": "something went wrong in the request"
          },
          "422": {
            "description": "validation error"
          }
        }
      },
      "delete": {
        "tags": ["Question"],
        "summary": "delete a question",
        "operationId": "question",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "params",
            "name": "id",
            "type": "string",
            "description": "question id for the question wanted to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted successfully"
          },
          "401": {
            "description": "There is no autherization"
          },
          "403": {
            "description": "something went wrong in the request"
          },
          "422": {
            "description": "validation error"
          }
        }
      }
    },
    "/{id}/comments": {
      "post": {
        "tags": ["Question"],
        "summary": "create comment on question",
        "operationId": "question",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "params",
            "name": "id",
            "type": "string",
            "description": "id of the question wants to comment on",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "id of the question wanted to be deleted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "created successfully"
          },
          "401": {
            "description": "There is no authentication"
          },
          "403": {
            "description": "something went wrong in the request"
          },
          "422": {
            "description": "validation error"
          }
        }
      }
    },
    "/{id}/comments/{commentid}": {
      "put": {
        "tags": ["Question"],
        "summary": "update comment on question",
        "operationId": "question",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "params",
            "name": "id",
            "type": "string",
            "description": "id of the question where the comment was commented",
            "required": true
          },
          {
            "in": "params",
            "name": "commentid",
            "type": "string",
            "description": "id of the comment wants to be updated",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "question id for the question wanted to be deleted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated successfully"
          },
          "401": {
            "description": "There is no authentication"
          },
          "403": {
            "description": "something went wrong in the request"
          },
          "422": {
            "description": "validation error"
          }
        }
      }
    },
    "/{id}/comments/{commentid} ": {
      "delete": {
        "tags": ["Question"],
        "summary": "delete comment on question",
        "operationId": "question",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "params",
            "name": "id",
            "type": "string",
            "description": "id of the question where the comment was commented",
            "required": true
          },
          {
            "in": "params",
            "name": "commentid",
            "type": "string",
            "description": "id of the comment wants to be deleted",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "deleted successfully"
          },
          "401": {
            "description": "There is no authentication"
          },
          "403": {
            "description": "something went wrong in the request"
          },
          "422": {
            "description": "validation error"
          }
        }
      }
    },
    "/questions": {
      "post": {
        "tags": ["Question"],
        "summary": "add new question",
        "requestBody": {
          "description": "question object that needs to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Question"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "422": {
            "description": "Validation error"
          },
          "403": {
            "description": "Not authorized user"
          }
        }
      },
      "get": {
        "tags": ["Question"],
        "summary": "get all questions",
        "description": "get all asked questions as an array of objects",
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/questions/{id}": {
      "get": {
        "tags": ["Question"],
        "summary": "Find question by ID",
        "description": "Returns a single question",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of question to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation return empty array when no question found, or array of questions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/questions/search": {
      "get": {
        "tags": ["Question"],
        "summary": "Search in question's title and content",
        "description": "Returns the questions that matche the title or content",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "description": "any text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation return empty when no question found or array of matched questions"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/questions/filter/tags": {
      "get": {
        "tags": ["Question"],
        "summary": "Filter question by tags [subjects]",
        "description": "Returns questions that their subjects match the tags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "tags of questions to return",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation return empty when no question found or array of questions matched the tags"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Question": {
        "required": ["id", "title", "content", "student"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": "61fde3daa7f0f2fbd623b66e"
          },
          "title": {
            "type": "string",
            "example": "Math question"
          },
          "content": {
            "type": "string",
            "example": "how to calculate...?"
          },
          "subjects": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": [
              {
                "title": "Math"
              }
            ]
          },
          "isSolved": {
            "type": "boolean",
            "default": "false"
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "integer",
              "forma": "int64"
            },
            "example": ["61fde3daa7f0f2fbd623b94a", "61fde3daa7f0f2fbd623b95a"]
          },
          "student": {
            "type": "integer",
            "format": "int64",
            "example": "61fde3daa7f0f2fbd623b97d"
          }
        }
      },
      "Comment": {
        "required": ["id", "content", "creator"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "string",
            "example": "ax+by+c=0"
          },
          "creator": {
            "type": "string",
            "example": "inas alarabi"
          },
          "isRead": {
            "type": "boolean",
            "default": "false"
          }
        }
      },
      "Student": {
        "required": ["id", "content", "creator"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "example": "inas7"
          },
          "firstName": {
            "type": "string",
            "example": "Inas"
          },
          "lastName": {
            "type": "string",
            "example": "Alarabi"
          },
          "email": {
            "type": "string",
            "example": "inasalarabi@gmail"
          }
        }
      }
    }
  },
  "definitions": {
    "Student": {
      "type": "object",
      "required": ["email", "firstName", "lastName", "password"],
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string",
          "example": "doggie"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "avatar": {
          "type": "string"
        },
        "subjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subjects"
          }
        },
        "isTutor": {
          "type": "boolean"
        }
      }
    },
    "SigninGoogle": {
      "type": "object",
      "required": ["token"],
      "properties": {
        "token": {
          "type": "string",
          "description": "Google auth token"
        }
      }
    },
    "Signin": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Subjects": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "enum": ["Math", "Physics", "Biology", "History", "Programming"]
        }
      }
    },
    "Question": {
      "type": "object",
      "required": ["title", "content", "student"],
      "properties": {
        "title": {
          "type": "string",
          "description": "title of the question"
        },
        "content": {
          "type": "string",
          "description": "content of the question"
        },
        "isSolved": {
          "type": "boolean",
          "description": "default is false"
        },
        "subjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subjects"
          }
        },
        "comments": {
          "type": "array",
          "$ref": "#/definitions/Comment"
        },
        "student": {
          "type": "string",
          "$ref": "#/definitions/Student"
        }
      }
    },
    "Comment": {
      "type": "object",
      "required": ["question", "creator", "content"],
      "properties": {
        "question": {
          "type": "string",
          "$ref": "#/definitions/Question"
        },
        "creator": {
          "type": "string",
          "$ref": "#/definitions/Student"
        },
        "content": {
          "type": "string"
        },
        "isRead": {
          "type": "boolean",
          "description": "default is false"
        }
      }
    },
    "ChangeableTutorProfile": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "isTutor": {
          "type": "boolean"
        },
        "avatar": {
          "type": "string"
        },
        "subjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subjects"
          }
        }
      }
    },
    "MessageParams": {
      "type": "object",
      "required": ["content", "receiver"],
      "properties": {
        "content": {
          "type": "string"
        },
        "chatId": {
          "type": "string"
        },
        "receiver": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
