{
  "openapi": "3.0.1",
  "info": {
    "title": "Students Teach Students API",
    "description": "API Documentation",
    "contact": {
      "email": "hello@studentsteach.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "localhost"
    }
  ],
  "tags": [
    {
      "name": "question",
      "description": "All asked questions"
    }
  ],
  "paths": {
    "/questions": {
      "post": {
        "tags": ["question"],
        "summary": "add new question",
        "operationId": "addQuestion",
        "requestBody": {
          "description": "question object that needs to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Question"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "422": {
            "description": "Error in validation or database"
          },
          "403": {
            "description": "Not authorized user"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "x-codegen-request-body-name": "body"
      },
      "get": {
        "tags": ["question"],
        "summary": "get all questions",
        "description": "get all asked questions as an array of objects",
        "operationId": "getAllQuestion",
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "422": {
            "description": "Database error"
          }
        },
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "x-codegen-request-body-name": "body"
      }
    },
    "/questions/{id}": {
      "get": {
        "tags": ["question"],
        "summary": "Find question by ID",
        "description": "Returns a single question",
        "operationId": "getQuestiontById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of question to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation return empty array when no question found, or array of questions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "422": {
            "description": "Database error"
          }
        }
      }
    },
    "/questions/search": {
      "get": {
        "tags": ["question"],
        "summary": "Search in question's title and content",
        "description": "Returns the questions that matche the title or content",
        "operationId": "searchForQuestion",
        "parameters": [
          {
            "name": "text",
            "in": "query",
            "description": "any text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation return empty when no question found or array of matched questions"
          },
          "422": {
            "description": "Database error"
          }
        }
      }
    },
    "/questions/filter/tags": {
      "get": {
        "tags": ["question"],
        "summary": "Filter question by tags [subjects]",
        "description": "Returns questions that ",
        "operationId": "getQuestiontById",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "tags of questions to return",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation return empty when no question found or array of questions matched the tags"
          },
          "422": {
            "description": "Database Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Question": {
        "required": ["id", "title", "content", "student"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": "61fde3daa7f0f2fbd623b66e"
          },
          "title": {
            "type": "string",
            "example": "Math question"
          },
          "content": {
            "type": "string",
            "example": "how to calculate...?"
          },
          "subjects": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": [{ "title": "Math" }]
          },
          "isSolved": {
            "type": "boolean",
            "default": "false"
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "integer",
              "forma": "int64"
            },
            "example": ["61fde3daa7f0f2fbd623b94a", "61fde3daa7f0f2fbd623b95a"]
          },
          "student": {
            "type": "integer",
            "format": "int64",
            "example": "61fde3daa7f0f2fbd623b97d"
          }
        }
      },
      "Comment": {
        "required": ["id", "content", "creator"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "content": {
            "type": "string",
            "example": "ax+by+c=0"
          },
          "creator": {
            "type": "string",
            "example": "inas alarabi"
          },
          "isRead": {
            "type": "boolean",
            "default": "false"
          }
        }
      },
      "Student": {
        "required": ["id", "content", "creator"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "example": "inas7"
          },
          "firstName": {
            "type": "string",
            "example": "Inas"
          },
          "lastName": {
            "type": "string",
            "example": "Alarabi"
          },
          "email": {
            "type": "string",
            "example": "inasalarabi@gmail"
          }
        }
      }
    }
  }
}
